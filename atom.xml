<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zero2key.gitee.io</id>
    <title>Zero2key&apos;s Blog</title>
    <updated>2020-09-12T07:40:41.374Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zero2key.gitee.io"/>
    <link rel="self" href="https://zero2key.gitee.io/atom.xml"/>
    <logo>https://zero2key.gitee.io/images/avatar.png</logo>
    <icon>https://zero2key.gitee.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Zero2key&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[手写Promise resolve,reject,race,all]]></title>
        <id>https://zero2key.gitee.io/post/otVwh9xK0/</id>
        <link href="https://zero2key.gitee.io/post/otVwh9xK0/">
        </link>
        <updated>2019-11-06T12:33:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="resolve">resolve</h2>
<pre><code class="language-js">static resolve(value) {
  return new P(resolve =&gt; resolve(value));
}
</code></pre>
<p><code>resolve</code> 就是返回一个新的 <code>resolved Promise</code>。</p>
<h2 id="reject">reject</h2>
<pre><code class="language-js">static reject(reason) {
  return new P((_, reject) =&gt; reject(reason));
}
</code></pre>
<p><code>reject</code> 就是返回一个新的 <code>rejected Promise</code>。</p>
<h2 id="all">all</h2>
<pre><code class="language-js">static all(pArray) {
  if (!Array.isArray(pArray)) {
    throw new Error('Arguments is not Array');
  }
  return new P((resolve, reject) =&gt; {
    const rets = Array(pArray.length);
    let num = 0;
    pArray.forEach((p, index) =&gt;
      P.resolve(p).then(value =&gt; {
        rets[index] = value;
        num++;
        if (num === pArray.length) {
          resolve(rets);
        }
      }, reject)
    );
  });
}
</code></pre>
<p><code>all</code> 稍微复杂一点，就是需要将 <code>pArray</code> 的所有值暂存下来，等所有的 <code>Promise</code> resolved，再将值返回去。</p>
<h2 id="race">race</h2>
<pre><code class="language-js">static race(pArray) {
  if (!Array.isArray(pArray)) {
    throw new Error('Arguments is not Array');
  }
  return new P((resolve, reject) =&gt; {
    pArray.forEach(p =&gt; P.resolve(p).then(resolve, reject));
  });
}
</code></pre>
<p><code>race</code> 就是返回一个 <code>Promise</code>，完成的条件就是传入的 <code>Promise</code> 哪个完成了，就调用 <code>resolve</code>或 <code>reject</code>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[手写Promise-1 核心]]></title>
        <id>https://zero2key.gitee.io/post/bLJYaNbqg/</id>
        <link href="https://zero2key.gitee.io/post/bLJYaNbqg/">
        </link>
        <updated>2019-10-08T12:48:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="promise-简单实现">Promise 简单实现</h2>
<pre><code class="language-js">const PromiseStatusMap = {
  pending: 'pending',
  resolved: 'resolved',
  rejected: 'rejected'
};
</code></pre>
<p>Promise 有三种状态 <code>pending</code>、<code>resolved</code>、<code>rejected</code>，初始为 <code>pending</code>，会转变为 <code>resolved</code> 或 <code>rejected</code></p>
<pre><code class="language-js">const PromiseStatus = '[[PromiseStatus]]';
const PromiseValue = '[[PromiseValue]]';
</code></pre>
<p>Promise 的 <code>[[PromiseStatus]]</code> 属性用于存贮状态，<code>[[PromiseValue]]</code> 属性用于存储 <code>resolved</code> 或 <code>rejected</code> 的值</p>
<pre><code class="language-js">class P {
  constructor(executor) {
    this[PromiseStatus] = PromiseStatusMap.pending;
    this[PromiseValue] = undefined;

    const reject = reason =&gt; {
      if (this[PromiseStatus] === PromiseStatusMap.pending) {
        this[PromiseValue] = reason;
        this[PromiseStatus] = PromiseStatusMap.rejected;
      }
    };

    const resolve = value =&gt; {
      if (value &amp;&amp; value.then &amp;&amp; typeof value.then === 'function') {
        value.then(resolve, reject);
        return;
      }
      if (this[PromiseStatus] === PromiseStatusMap.pending) {
        this[PromiseValue] = value;
        this[PromiseStatus] = PromiseStatusMap.resolved;
      }
    };

    executor(resolve, reject);
  }
}
</code></pre>
<p>手写一个 Promise <code>P</code> 先看构造函数，构造函数中的内部函数 <code>resolve</code>、<code>reject</code> 修改 <code>P</code> 的状态并且将 <code>resolved</code> 或 <code>rejected</code> 的值存下来，仅修改 <code>pending</code> 状态的 <code>P</code>，修改一次后再次调用 <code>resolve</code> 或 <code>reject</code> 无效。</p>
<p>如果 <code>resolve</code> 的值是 <code>thenable</code> 的，直接调用 <code>value.then</code>，传入 <code>resolve</code>、<code>reject</code>。</p>
<pre><code class="language-js">then(onfulfilled, onrejected) {
  if (this[PromiseStatus] === PromiseStatusMap.resolved &amp;&amp; onfulfilled) {
    onfulfilled(this[PromiseValue])
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected &amp;&amp; onrejected) {
    onrejected(this[PromiseValue])
  }
}

catch(onrejected) {
  if (this[PromiseStatus] === PromiseStatusMap.rejected &amp;&amp; onrejected) {
    onrejected(this[PromiseValue])
  }
}
</code></pre>
<p>先不考虑 状态为 <code>pending</code> 的 <code>P</code>，<code>then</code> 和 <code>catch</code> 函数很简单。</p>
<h2 id="完善-promise">完善 Promise</h2>
<p><code>Promise</code> 的特点是可以链式调用，每次调用 <code>then</code> 和 <code>catch</code> 函数都会返回一个新的 <code>Promise</code>，如果 <code>Promise</code> 的 <code>then</code> 或 <code>catch</code> 中传入的回调函数为 <code>undefined</code> 或者 <code>null</code>，则将 <code>Promise</code> 的值向后传递。</p>
<p>修改过后的 <code>then</code> 和 <code>catch</code> 如下：</p>
<pre><code class="language-js">then(onfulfilled, onrejected) {
  if (this[PromiseStatus] === PromiseStatusMap.resolved &amp;&amp; onfulfilled) {
    return new P(resolve =&gt; {
      resolve(onfulfilled(this[PromiseValue]));
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.resolved) {
    return new P(resolve =&gt; {
      resolve(this[PromiseValue]);
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected &amp;&amp; onrejected) {
    return new P(resolve =&gt; {
      resolve(onrejected(this[PromiseValue]));
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected) {
    return new P((_, reject) =&gt; {
      reject(this[PromiseValue]);
    });
  }
}

catch(onrejected) {
  if (this[PromiseStatus] === PromiseStatusMap.resolved) {
    return new P(resolve =&gt; {
      resolve(this[PromiseValue]);
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected &amp;&amp; onrejected) {
    return new P(resolve =&gt; {
      resolve(onrejected(this[PromiseValue]));
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected) {
    return new P((_, reject) =&gt; {
      reject(this[PromiseValue]);
    });
  }
}
</code></pre>
<p>但是当 <code>P</code> 的状态为 <code>pending</code> 时，如何返回一个新的 <code>P</code> 呢？</p>
<p>只需要将 <code>onfulfilled</code>、<code>onrejected</code>，和新返回的 <code>P</code> 的 <code>resolve</code> 和 <code>reject</code> 保存下来，待当前 <code>P</code> 的 <code>resolve</code> 或 <code>reject</code> 调用时，将值向后传递。</p>
<pre><code class="language-js">then(onfulfilled, onrejected) {
  if (this[PromiseStatus] === PromiseStatusMap.pending) {
    return new P((resolve, reject) =&gt; {
      this.thenList.push({
        resolve,
        reject,
        onfulfilled,
        onrejected
      });
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.resolved &amp;&amp; onfulfilled) {
    return new P(resolve =&gt; {
      resolve(onfulfilled(this[PromiseValue]));
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.resolved) {
    return new P(resolve =&gt; {
      resolve(this[PromiseValue]);
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected &amp;&amp; onrejected) {
    return new P(resolve =&gt; {
      resolve(onrejected(this[PromiseValue]));
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected) {
    return new P((_, reject) =&gt; {
      reject(this[PromiseValue]);
    });
  }
}

catch(onrejected) {
  if (this[PromiseStatus] === PromiseStatusMap.pending) {
    return new P((resolve, reject) =&gt; {
      this.catchList.push({
        resolve,
        reject,
        onrejected
      });
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.resolved) {
    return new P(resolve =&gt; {
      resolve(this[PromiseValue]);
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected &amp;&amp; onrejected) {
    return new P(resolve =&gt; {
      resolve(onrejected(this[PromiseValue]));
    });
  } else if (this[PromiseStatus] === PromiseStatusMap.rejected) {
    return new P((_, reject) =&gt; {
      reject(this[PromiseValue]);
    });
  }
}
</code></pre>
<pre><code class="language-js">const reject = reason =&gt; {
  setTimeout(() =&gt; {
    if (this[PromiseStatus] === PromiseStatusMap.pending) {
      this[PromiseValue] = reason;
      this[PromiseStatus] = PromiseStatusMap.rejected;
      this.thenList.forEach(t =&gt; {
        if (t.onrejected) {
          t.resolve(t.onrejected(this[PromiseValue]));
        } else {
          t.reject(this[PromiseValue]);
        }
      });
      this.catchList.forEach(c =&gt; {
        if (c.onrejected) {
          c.resolve(c.onrejected(this[PromiseValue]));
        } else {
          c.reject(this[PromiseValue]);
        }
      });
      this.thenList = [];
      this.catchList = [];
    }
  });
};

const resolve = value =&gt; {
  if (value &amp;&amp; value.then &amp;&amp; typeof value.then === 'function') {
    value.then(resolve, reject);
    return;
  }
  setTimeout(() =&gt; {
    if (this[PromiseStatus] === PromiseStatusMap.pending) {
      this[PromiseValue] = value;
      this[PromiseStatus] = PromiseStatusMap.resolved;
      this.thenList.forEach(t =&gt; {
        if (t.onfulfilled) {
          t.resolve(t.onfulfilled(this[PromiseValue]));
        } else {
          t.resolve(this[PromiseValue]);
        }
      });
      this.catchList.forEach(c =&gt; {
        c.resolve(this[PromiseValue]);
      });
    }
  });
};
</code></pre>
<p><code>Promise</code> 的传入的回调函数如果出现同步异常也会 <code>rejected</code>，如果 <code>Promise</code> <code>reject</code> 的值后面没有 <code>catched</code>，需要抛出 <code>UnCatchedError</code></p>
<pre><code class="language-js">class UnCatchedError extends Error {
  constructor(message) {
    super(message);
    this.name = 'UnCatchedError';
  }
}
</code></pre>
<pre><code class="language-js">try {
  executor(resolve, reject);
} catch (e) {
  if (e instanceof UnCatchedError) {
    throw e;
  }
  return new P((_, reject) =&gt; {
    reject(e);
  });
}
</code></pre>
<h2 id="精简">精简</h2>
<p>将重复的逻辑提炼一下，最后如下：</p>
<pre><code class="language-js">const PromiseStatus = '[[PromiseStatus]]';
const PromiseValue = '[[PromiseValue]]';

const PromiseStatusMap = {
  pending: 'pending',
  resolved: 'resolved',
  rejected: 'rejected'
};

class UnCatchedError extends Error {
  constructor(message) {
    super(message);
    this.name = 'UnCatchedError';
  }
}

class P {
  constructor(executor) {
    this[PromiseStatus] = PromiseStatusMap.pending;
    this[PromiseValue] = undefined;
    this.nextList = [];

    const reject = reason =&gt; {
      setTimeout(() =&gt; {
        if (this[PromiseStatus] === PromiseStatusMap.pending) {
          this[PromiseValue] = reason;
          this[PromiseStatus] = PromiseStatusMap.rejected;
          if (!this.nextList.length) {
            throw new UnCatchedError(reason);
          }
          this.nextList.forEach(t =&gt; {
            if (t.onrejected) {
              t.resolve(t.onrejected(this[PromiseValue]));
            } else {
              t.reject(this[PromiseValue]);
            }
          });
          this.nextList = [];
        }
      });
    };
    const resolve = value =&gt; {
      if (value &amp;&amp; value.then &amp;&amp; typeof value.then === 'function') {
        value.then(resolve, reject);
        return;
      }
      setTimeout(() =&gt; {
        if (this[PromiseStatus] === PromiseStatusMap.pending) {
          this[PromiseValue] = value;
          this[PromiseStatus] = PromiseStatusMap.resolved;
          this.nextList.forEach(t =&gt; {
            if (t.onfulfilled) {
              t.resolve(t.onfulfilled(this[PromiseValue]));
            } else {
              t.resolve(this[PromiseValue]);
            }
          });
          this.nextList = [];
        }
      });
    };
    try {
      executor(resolve, reject);
    } catch (e) {
      if (e instanceof UnCatchedError) {
        throw e;
      }
      return new P((_, reject) =&gt; {
        reject(e);
      });
    }
  }

  _then(onfulfilled, onrejected) {
    if (this[PromiseStatus] === PromiseStatusMap.pending) {
      return new P((resolve, reject) =&gt; {
        this.nextList.push({
          resolve,
          reject,
          onfulfilled,
          onrejected
        });
      });
    } else if (this[PromiseStatus] === PromiseStatusMap.resolved &amp;&amp; onfulfilled) {
      return new P(resolve =&gt; {
        resolve(onfulfilled(this[PromiseValue]))
      });
    } else if (this[PromiseStatus] === PromiseStatusMap.resolved) {
      return new P(resolve =&gt; {
        resolve(this[PromiseValue]);
      });
    } else if (this[PromiseStatus] === PromiseStatusMap.rejected &amp;&amp; onrejected) {
      return new P(resolve =&gt; {
        resolve(onrejected(this[PromiseValue]));
      });
    } else if (this[PromiseStatus] === PromiseStatusMap.rejected) {
      return new P((_, reject) =&gt; {
        reject(this[PromiseValue]);
      });
    }
  }

  then(onfulfilled, onrejected) {
    return this._then(onfulfilled, onrejected);
  }

  catch(onrejected) {
    return this._then(undefined, onrejected);
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redux 源码解析-bindActionCreators]]></title>
        <id>https://zero2key.gitee.io/post/KVfXkLcIY/</id>
        <link href="https://zero2key.gitee.io/post/KVfXkLcIY/">
        </link>
        <updated>2019-09-11T12:08:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="源码">源码</h2>
<pre><code class="language-js">function bindActionCreator(actionCreator, dispatch) {
  // 返回一个将 dispatch 和 actionCreator 绑定的函数
  // 直接调用返回的函数可以直接分发 actionCreator 对应的 action
  return function() {
    return dispatch(actionCreator.apply(this, arguments))
  }
}

export default function bindActionCreators(actionCreators, dispatch) {
  // 如果 actionCreators 是函数，当做一个 actionCreator
  // 直接返回 actionCreators 和 dispatch 的绑定
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch)
  }

  // 如果 actionCreators 不是对象报错
  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error(
      `bindActionCreators expected an object or a function, instead received ${
        actionCreators === null ? 'null' : typeof actionCreators
      }. ` +
        `Did you write &quot;import ActionCreators from&quot; instead of &quot;import * as ActionCreators from&quot;?`
    )
  }

  // 用于存放已绑定的 actionCreator 的对象
  const boundActionCreators = {}
  // 遍历 actionCreators
  for (const key in actionCreators) {
    // 取对应的 actionCreator
    const actionCreator = actionCreators[key]
    if (typeof actionCreator === 'function') {
      // boundActionCreators 中设置与 actionCreators 相同的 key 为对应的 actionCreator 绑定函数
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)
    }
  }
  return boundActionCreators
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redux 源码解析-createStore]]></title>
        <id>https://zero2key.gitee.io/post/9nKzwh1h5/</id>
        <link href="https://zero2key.gitee.io/post/9nKzwh1h5/">
        </link>
        <updated>2019-09-08T14:21:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="源码">源码</h2>
<pre><code class="language-js">export default function createStore(reducer, preloadedState, enhancer) {
  // preloadedState 和 enhancer 不可以同时为 function
  if (
    (typeof preloadedState === 'function' &amp;&amp; typeof enhancer === 'function') ||
    (typeof enhancer === 'function' &amp;&amp; typeof arguments[3] === 'function')
  ) {
    throw new Error(
      'It looks like you are passing several store enhancers to ' +
        'createStore(). This is not supported. Instead, compose them ' +
        'together to a single function.'
    )
  }
  
  // 如果 preloadedState 为 function，传入的 preloadedState 为中间件
  if (typeof preloadedState === 'function' &amp;&amp; typeof enhancer === 'undefined') {
    // 将 preloadedState 赋值给 enhancer
    enhancer = preloadedState
    // 预定义的 state 为 undefined
    preloadedState = undefined
  }

  // 如果 enhancer 为 function
  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.')
    }
    // 返回 中间件包装的 createStore
    return enhancer(createStore)(reducer, preloadedState)
  }

  // reducer 必须为 function
  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.')
  }
  
  // 初始化 currentReducer
  let currentReducer = reducer
  // 初始化当前 state 为 preloadedState
  let currentState = preloadedState
  // 当前监听器列表
  let currentListeners = []
  // 下一次监听器列表
  let nextListeners = currentListeners
  // 派发标记位
  let isDispatching = false

  // 确保下一次监听器列表和当前监听器列表不是同一个数组
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice()
    }
  }

  function getState() {
    // 如果正在派发中抛出异常
    if (isDispatching) {
      throw new Error(
        'You may not call store.getState() while the reducer is executing. ' +
          'The reducer has already received the state as an argument. ' +
          'Pass it down from the top reducer instead of reading it from the store.'
      )
    }

    // 返回当前 state
    return currentState
  }

  // 订阅函数
  function subscribe(listener) {
    // 监听器必须为 function
    if (typeof listener !== 'function') {
      throw new Error('Expected the listener to be a function.')
    }

    // 如果正在派发中抛出异常
    if (isDispatching) {
      throw new Error(
        'You may not call store.subscribe() while the reducer is executing. ' +
          'If you would like to be notified after the store has been updated, subscribe from a ' +
          'component and invoke store.getState() in the callback to access the latest state. ' +
          'See https://redux.js.org/api-reference/store#subscribelistener for more details.'
      )
    }

    // 订阅标记
    let isSubscribed = true

    ensureCanMutateNextListeners()
    // 将监听器加入下一次监听器列表
    nextListeners.push(listener)

    // 取消订阅
    return function unsubscribe() {
      // 如果订阅标记为 false，表示为已经取消订阅，直接返回
      if (!isSubscribed) {
        return
      }

      // 如果正在派发中抛出异常
      if (isDispatching) {
        throw new Error(
          'You may not unsubscribe from a store listener while the reducer is executing. ' +
            'See https://redux.js.org/api-reference/store#subscribelistener for more details.'
        )
      }

      // 设置订阅标记为 false
      isSubscribed = false

      ensureCanMutateNextListeners()

      // 从下一次订阅列表中删除当前取消订阅的监听器
      const index = nextListeners.indexOf(listener)
      nextListeners.splice(index, 1)
      // 设置当前订阅列表为 null
      currentListeners = null
    }
  }

  // 派发函数
  function dispatch(action) {
    // action 必须为纯对象
    if (!isPlainObject(action)) {
      throw new Error(
        'Actions must be plain objects. ' +
          'Use custom middleware for async actions.'
      )
    }

    // action 必须包含 type
    if (typeof action.type === 'undefined') {
      throw new Error(
        'Actions may not have an undefined &quot;type&quot; property. ' +
          'Have you misspelled a constant?'
      )
    }

    // 如果正在派发中抛出异常
    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.')
    }

    try {
      // 设置派发标记位为 true
      isDispatching = true
      // 通过 reducer 依据当前 state 和 action 获取新的 state
      currentState = currentReducer(currentState, action)
    } finally {
      // 设置派发标记位为 false
      isDispatching = false
    }

    // 触发所有订阅的监听器
    const listeners = (currentListeners = nextListeners)
    for (let i = 0; i &lt; listeners.length; i++) {
      const listener = listeners[i]
      listener()
    }

    // 返回 action
    return action
  }

  // 替换 reducer
  function replaceReducer(nextReducer) {
    // reducer 必须为 function
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.')
    }

    currentReducer = nextReducer

    // 派发 REPLACE action
    dispatch({ type: ActionTypes.REPLACE })
  }

  function observable() {
    const outerSubscribe = subscribe
    return {
      subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new TypeError('Expected the observer to be an object.')
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState())
          }
        }

        observeState()
        const unsubscribe = outerSubscribe(observeState)
        return { unsubscribe }
      },

      [$$observable]() {
        return this
      }
    }
  }

  /**
   * 派发 INIT action
   * 依据当前 state，经过 reducer 获取默认 state
   */
  dispatch({ type: ActionTypes.INIT })

  return {
    dispatch,
    subscribe,
    getState,
    replaceReducer,
    [$$observable]: observable
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redux 源码解析-简介]]></title>
        <id>https://zero2key.gitee.io/post/KbkMQoUmf/</id>
        <link href="https://zero2key.gitee.io/post/KbkMQoUmf/">
        </link>
        <updated>2019-09-07T15:18:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="简介">简介</h2>
<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</p>
<h2 id="安装">安装</h2>
<pre><code class="language-bash">npm install redux --save
# or
yarn add redux
</code></pre>
<h2 id="概念">概念</h2>
<p>Redux 中的 state 是以一个对象的形式存储在一个单一的 store 中。唯一可以更改 state 的方法是 dispatch 一个 action，一个描述发生了什么的对象。为了响应一个 action 如何修改 state，需要编写 reducers。</p>
<pre><code class="language-js">import { createStore } from 'redux';

/**
 * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。
 * 描述了 action 如何把 state 转变成下一个 state。
 */
function counter(state = 0, action) {
  switch (action.type) {
  case 'INCREMENT':
    return state + 1;
  case 'DECREMENT':
    return state - 1;
  default:
    return state;
  }
}

// 创建 Redux store 来存放应用的状态。
// API 是 { subscribe, dispatch, getState }。
let store = createStore(counter);

// 可以手动订阅更新，也可以事件绑定到视图层。
store.subscribe(() =&gt;
  console.log(store.getState())
);

// 改变内部 state 惟一方法是 dispatch 一个 action。
// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行
store.dispatch({ type: 'INCREMENT' });
// 1
store.dispatch({ type: 'INCREMENT' });
// 2
store.dispatch({ type: 'DECREMENT' });
// 1
</code></pre>
]]></content>
    </entry>
</feed>